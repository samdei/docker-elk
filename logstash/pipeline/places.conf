input {
    jdbc {
        # The path to our downloaded jdbc driver
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java-8.0.18.jar"
        # The name of the driver class for MySQL
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # MySQL jdbc connection string to our database, mydb
        jdbc_connection_string => "jdbc:mysql://${DB_HOST}:3306/tripkru_dev"
        # The user we wish to execute our statement as
        jdbc_user => "${DB_USER}"
        # The user we wish to execute our statement as
        jdbc_password => "${DB_PASSWORD}"
        # enable paging
        jdbc_paging_enabled => "true"
        jdbc_page_size => "50000"
        # schedule every 30 min
        schedule => "*/30 * * * *"
        # dont lowercase fields
        lowercase_column_names => "false"
        # record last run
        record_last_run => "true" 
        # set last run path
        last_run_metadata_path => "/usr/share/logstash/lastrun/.logstash_jdbc_last_run_places"
        # our query
        statement => "SELECT place.id, place.name, place.latitude, place.longitude, 
            place.address, place.vicinity, place.country, 
            place.phoneNumber, place.website, place.photoUrl, 
            place.priceLevel, place.rating,
            place.created, place.updated, place.deleted,
            placetype.id AS typeId, placetype.name AS typeName
            FROM place
            INNER JOIN place_placetype ON place_placetype.placeId = place.id
            INNER JOIN placetype ON placetype.id = place_placetype.typeId
            WHERE place.updated > :sql_last_value
            ORDER BY place.id"
    }
}

filter {
    aggregate {
        task_id => "%{id}"
        code => "
            map['id'] = event.get('id')
            map['name'] = event.get('name')
            map['latitude'] = event.get('latitude') 
            map['longitude'] = event.get('longitude') 
            map['address'] = event.get('address') 
            map['vicinity'] = event.get('vicinity') 
            map['country'] = event.get('country') 
            map['phoneNumber'] = event.get('phoneNumber') 
            map['website'] = event.get('website') 
            map['photoUrl'] = event.get('photoUrl') 
            map['priceLevel'] = event.get('priceLevel') 
            map['rating'] = event.get('rating')
            map['created'] = event.get('created') 
            map['updated'] = event.get('updated') 
            map['deleted'] = event.get('deleted')
            map['types'] ||= []
            map['types'] << {
                'id' => event.get('typeId'),
                'name' => event.get('typeName')
            }
            event.cancel()
        "
        push_previous_map_as_event => true
        timeout => 3
    }
}

output {
    elasticsearch {
        index => "place"
        document_id => "place_%{id}"
        hosts => "elasticsearch:9200"
		user => "${ELASTIC_USER}"
		password => "${ELASTIC_PASSWORD}"
        ilm_enabled => "false"
    }
}